/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.deployment.ui.contentassist;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;

import com.google.common.base.Predicate;
import com.google.inject.Inject;

import de.fraunhofer.ipa.deployment.generator.DeploymentHelper;
import de.fraunhofer.ipa.deployment.utils.PlanWithRosmodelUtils;
import deployPlanWithRosModel.ConfigRosParameter;
import deployPlanWithRosModel.ConfigRosSoftwareComponent;
import deployPlanWithRosModel.DeployRossystemPlan;
import deployPlanWithRosModel.RossystemImplementationAssignment;
import deployPlanWithRosModel.impl.ConfigRosParameterImpl;
import deployPlanWithRosModel.impl.RossystemImplementationAssignmentImpl;
import deploymentPlan.AbstractDeploymentPlan;
import deploymentPlan.RosMiddleware;
import ros.impl.ParameterImpl;
import system.Component;
import system.RosNode;
import system.RosParameter;
import system.System;
import system.impl.RosParameterImpl;
import targetEnvironment.ComputationDeviceInstance;
import targetEnvironment.impl.ConfigConnectionPropertyImpl;
import targetEnvironment.impl.ConfigDevicePropertyImpl;


/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class PlanWithRosmodelProposalProvider extends AbstractPlanWithRosmodelProposalProvider {


  @Inject
  @Extension
  private DeploymentHelper _deploymentHelper;

  @Inject
  @Extension
  private PlanWithRosmodelUtils _utils;

  @Override
    public void completeRossystemImplementationAssignment_ExecutedBy(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    RossystemImplementationAssignment implAssign = (RossystemImplementationAssignment) model;
        AbstractDeploymentPlan plan = (AbstractDeploymentPlan) implAssign.eContainer().eContainer();
        lookupCrossReference((CrossReference) assignment.getTerminal(),
                context, acceptor, new Predicate<IEObjectDescription>() {
                    @Override
                    public boolean apply(IEObjectDescription input) {
                        ComputationDeviceInstance inputObj = (ComputationDeviceInstance) input.getEObjectOrProxy();
                        if(inputObj.eIsProxy()) {
                            EObject obj = EcoreUtil.resolve(inputObj, model);
                            if(plan.getDeployTo() == obj.eContainer()) {
                                return true;
                            }
                        }
                        return false;
                    }

        });

   }

  @Override
  public void completeConfigRosSoftwareComponent_Component(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    RossystemImplementationAssignmentImpl impl_assignment = (RossystemImplementationAssignmentImpl) model;
    DeployRossystemPlan plan = (DeployRossystemPlan) impl_assignment.eContainer().eContainer();
    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              System inputObj = (System) input.getEObjectOrProxy();
              if(inputObj.eIsProxy()) {
                    EObject obj = EcoreUtil.resolve(inputObj, model);
                if(plan.getTargetRossystem() != null) {
                  List<System>  refsystems = (List<System>) plan.getTargetRossystem().getComponents().stream()
                      .filter(it -> it instanceof System)
                      .map(System.class::cast)
                      .collect(Collectors.toList());
                  List<Component>  systems = (List<Component>) refsystems.stream().map(System::getComponents).flatMap(List::stream).toList();
                  if(systems.contains(obj)) {
                            return true;
                        }
                }
                else {
                  return true;
                }

            }
              return false;
            }
    });
  }


  @Override
  public void completeConfigRosParameter_To(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    ConfigRosParameterImpl real_model = (ConfigRosParameterImpl) model;
    AbstractDeploymentPlan plan = (AbstractDeploymentPlan) real_model.eContainer().eContainer().eContainer().eContainer();
    var targetenv = plan.getDeployTo();
    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              // not ConfigConnectionImpl
              if(input.getEObjectOrProxy() instanceof ConfigDevicePropertyImpl) {
                  ConfigDevicePropertyImpl inputObj = (ConfigDevicePropertyImpl) input.getEObjectOrProxy();
                  if(inputObj.eIsProxy()) {
                        EObject obj = EcoreUtil.resolve(inputObj, model);
                        if(targetenv.getIncludeDevice().contains(obj.eContainer())) {
                            return true;
                        }
                  }
              }
              if(input.getEObjectOrProxy() instanceof ConfigConnectionPropertyImpl) {
                ConfigConnectionPropertyImpl inputObj = (ConfigConnectionPropertyImpl) input.getEObjectOrProxy();
                  if(inputObj.eIsProxy()) {
                        EObject obj = EcoreUtil.resolve(inputObj, model);
                        if(targetenv.equals(obj.eContainer().eContainer().eContainer())) {
                            return true;
                        }
                  }
              }
          return false;
            }
    });
  }

  @Override
  public void completeConfigRosParameter_RefSysParam(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    ConfigRosParameterImpl real_model = (ConfigRosParameterImpl) model;
    ConfigRosSoftwareComponent comp = (ConfigRosSoftwareComponent) real_model.eContainer();
    System sys = comp.getComponent();
    List<System> all_include_systems = new ArrayList<System>();
    _utils.getAllSystem(sys, all_include_systems);

    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              ParameterImpl inputObj = (ParameterImpl) input.getEObjectOrProxy();
              if(inputObj.eIsProxy()) {
                    EObject obj = EcoreUtil.resolve(inputObj, model);
                    if(all_include_systems.stream()
                        .map(System::getParameter)
                        .flatMap(List::stream)
                        .collect(Collectors.toList()).contains(obj)
                          && !comp.getExecutionConfiguration().stream()
                          .map(ConfigRosParameter.class::cast)
                          .map(ConfigRosParameter::getRefSysParam)
                          .filter(Objects::nonNull)
                          .collect(Collectors.toList())
                          .contains(obj)
                        ) {
                        return true;
                    }
            }
              return false;
            }
    });
  }

  @Override
  public void completeConfigRosParameter_RefNodeParam(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    ConfigRosParameterImpl real_model = (ConfigRosParameterImpl) model;
    ConfigRosSoftwareComponent comp = (ConfigRosSoftwareComponent) real_model.eContainer();
    System sys = comp.getComponent();
    List<System> all_include_systems = new ArrayList<System>();
    _utils.getAllSystem(sys, all_include_systems);

    List<RosParameter> params = all_include_systems.stream()
        .map(System::getComponents)
        .flatMap(List::stream)
        .filter(it -> it instanceof RosNode)
        .map(RosNode.class::cast)
        .map(RosNode::getRosparameters)
        .flatMap(List::stream)
        .collect(Collectors.toList());

    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              RosParameterImpl inputObj = (RosParameterImpl) input.getEObjectOrProxy();
              if(inputObj.eIsProxy()) {
                    EObject obj = EcoreUtil.resolve(inputObj, model);
                    if(params.contains(obj)
                && !comp.getExecutionConfiguration().stream()
                  .map(ConfigRosParameter.class::cast)
                  .map(ConfigRosParameter::getRefNodeParam)
                  .filter(Objects::nonNull)
                  .collect(Collectors.toList())
                  .contains(obj)) {
                        return true;
                    }
                    else {
                      return false;
                    }
            }
              return false;
            }
    });
  }

  @Override
  public void completeConfigRosSoftwareComponent_StartCommand(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    java.lang.System.out.println("completeConfigRosSoftwareComponent_StartCommand");
    ConfigRosSoftwareComponent real_model = (ConfigRosSoftwareComponent) model;
    System sys = real_model.getComponent();
    if(sys.getFromFile() != null) {
      var ss = sys.getFromFile().split("/", -1);
      var pkg = ss[0];
      var launch_file = ss[2];
      RossystemImplementationAssignment impl_assignment = (RossystemImplementationAssignment) real_model.eContainer();
      if(impl_assignment.getMiddleware() != null ) {
        var ros_version = _deploymentHelper.getRosVersionFromDistro(((RosMiddleware) impl_assignment.getMiddleware()).getValue().getName());
        acceptor.accept(createCompletionProposal(String.format("\"%s launch %s %s\"",ros_version, pkg, launch_file) , context));
      }
    }
  }

}
