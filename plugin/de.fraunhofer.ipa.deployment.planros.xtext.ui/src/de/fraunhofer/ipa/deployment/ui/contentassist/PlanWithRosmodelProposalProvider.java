/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.deployment.ui.contentassist;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.eclipse.xtext.xbase.lib.Extension;

import com.google.common.base.Predicate;
import com.google.inject.Inject;

import de.fraunhofer.ipa.deployment.generator.DeploymentHelper;
import de.fraunhofer.ipa.deployment.utils.PlanWithRosmodelUtils;
import deployPlanWithRosModel.ConfigRosParameter;
import deployPlanWithRosModel.ConfigRosSoftwareComponent;
import deployPlanWithRosModel.DeployRossystemPlan;
import deployPlanWithRosModel.RossystemImplementationAssignment;
import deployPlanWithRosModel.impl.ConfigRosParameterImpl;
import deployPlanWithRosModel.impl.RossystemImplementationAssignmentImpl;
import deploymentPlan.AbstractDeploymentPlan;
import deploymentPlan.RosMiddleware;
import ros.Parameter;
import ros.impl.ParameterImpl;
import system.Component;
import system.RosNode;
import system.RosParameter;
import system.System;
import system.impl.RosParameterImpl;
import targetEnvironment.ComputationDeviceInstance;
import targetEnvironment.impl.ConfigConnectionPropertyImpl;
import targetEnvironment.impl.ConfigDevicePropertyImpl;


/**
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#content-assist
 * on how to customize the content assistant.
 */
public class PlanWithRosmodelProposalProvider extends AbstractPlanWithRosmodelProposalProvider {


  @Inject
  @Extension
  private DeploymentHelper _deploymentHelper;

  @Inject
  @Extension
  private PlanWithRosmodelUtils _utils;

  @Override
    public void completeRossystemImplementationAssignment_ExecutedBy(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    RossystemImplementationAssignment implAssign = (RossystemImplementationAssignment) model;
        AbstractDeploymentPlan plan = (AbstractDeploymentPlan) implAssign.eContainer().eContainer();
        lookupCrossReference((CrossReference) assignment.getTerminal(),
                context, acceptor, new Predicate<IEObjectDescription>() {
                    @Override
                    public boolean apply(IEObjectDescription input) {
                        ComputationDeviceInstance inputObj = (ComputationDeviceInstance) input.getEObjectOrProxy();
                        if(inputObj.eIsProxy()) {
                            EObject obj = EcoreUtil.resolve(inputObj, model);
                            if(plan.getDeployTo() == obj.eContainer()) {
                                return true;
                            }
                        }
                        return false;
                    }

        });

   }

  @Override
  public void completeConfigRosSoftwareComponent_Component(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    RossystemImplementationAssignmentImpl impl_assignment = (RossystemImplementationAssignmentImpl) model;

    DeployRossystemPlan plan = (DeployRossystemPlan) impl_assignment.eContainer().eContainer();
    List<Component> components = new ArrayList<Component>();
  _utils.getAllComponentsFromSystem(plan.getTargetRossystem(), components);

    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            // input is any rossystem in the workspace
            public boolean apply(IEObjectDescription input) {
              Component inputObj = (Component) input.getEObjectOrProxy();
              if(inputObj.eIsProxy()) {
              // from rossystem proxy get possible Component
                EObject obj = EcoreUtil.resolve(inputObj, model);
                List<Component> pending_components = components;

                if(plan.getTargetRossystem() != null) {
                  List<Component> defined_components = impl_assignment.getSoftwareComponents().stream().map(ConfigRosSoftwareComponent::getComponent).collect(Collectors.toList());

                  if(defined_components.size()>0) {
                    for (Component component : defined_components) {
                      // Remove all component within defined subsystem
              if(component instanceof System) {
                List<Component> children = new ArrayList<Component>();
                _utils.getAllComponentsFromSystem((System) component, children);
                if(children.size()>0) {
                  pending_components.removeAll(children);
                }
              }
              // If a node is defined, user has to define all component in the system where the node belong
              if(component instanceof RosNode) {
                if (component.eContainer()  instanceof System) {
                  pending_components.remove((System) component.eContainer());
                }
              }
            }
                  }
                  pending_components.removeAll(defined_components);


//                  List<SubSystem>  refsubsystems = (List<SubSystem>) plan.getTargetRossystem().getComponents().stream()
//                      .filter(it -> it instanceof SubSystem)
//                      .map(SubSystem.class::cast)
//                      .collect(Collectors.toList());
//                  java.lang.System.out.printf("refsubsystems: %s\n", refsubsystems);
//                  List<Component>  components = (List<Component>) refsubsystems.stream().map(SubSystem::getSystem).map(System::getComponents).flatMap(List::stream).toList();

                  if(pending_components.contains(obj)) {
                    return true;
                    }
                }
                else {
                  return false;
                }

            }
              return false;
            }
    });
  }


  @Override
  public void completeConfigRosParameter_To(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    ConfigRosParameterImpl real_model = (ConfigRosParameterImpl) model;
    AbstractDeploymentPlan plan = (AbstractDeploymentPlan) real_model.eContainer().eContainer().eContainer().eContainer();
    var targetenv = plan.getDeployTo();
    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              // not ConfigConnectionImpl
              if(input.getEObjectOrProxy() instanceof ConfigDevicePropertyImpl) {
                  ConfigDevicePropertyImpl inputObj = (ConfigDevicePropertyImpl) input.getEObjectOrProxy();
                  if(inputObj.eIsProxy()) {
                        EObject obj = EcoreUtil.resolve(inputObj, model);
                        if(targetenv.getIncludeDevice().contains(obj.eContainer())) {
                            return true;
                        }
                  }
              }
              if(input.getEObjectOrProxy() instanceof ConfigConnectionPropertyImpl) {
                ConfigConnectionPropertyImpl inputObj = (ConfigConnectionPropertyImpl) input.getEObjectOrProxy();
                  if(inputObj.eIsProxy()) {
                        EObject obj = EcoreUtil.resolve(inputObj, model);
                        if(targetenv.equals(obj.eContainer().eContainer().eContainer())) {
                            return true;
                        }
                  }
              }
          return false;
            }
    });
  }

  @Override
  public void completeConfigRosParameter_RefSysParam(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    ConfigRosParameterImpl real_model = (ConfigRosParameterImpl) model;
    ConfigRosSoftwareComponent comp = (ConfigRosSoftwareComponent) real_model.eContainer();
    Component target_component = (Component) comp.getComponent();
    List<System> all_include_systems = new ArrayList<System>();
    if(target_component instanceof System) {
    _utils.getAllSystem((System) target_component, all_include_systems);
    }
    List<Parameter> params = all_include_systems.stream()
            .map(System::getParameter)
            .flatMap(List::stream)
            .filter(p -> p.getValue() == null)
            .collect(Collectors.toList());

    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              ParameterImpl inputObj = (ParameterImpl) input.getEObjectOrProxy();
              if(inputObj.eIsProxy()) {
                    EObject obj = EcoreUtil.resolve(inputObj, model);
                    if(params.contains(obj)
                          && !comp.getExecutionConfiguration().stream()
                          .map(ConfigRosParameter.class::cast)
                          .map(ConfigRosParameter::getRefSysParam)
                          .filter(Objects::nonNull)
                          .collect(Collectors.toList())
                          .contains(obj)
                        ) {
                        return true;
                    }
            }
              return false;
            }
    });
  }

  @Override
  public void completeConfigRosParameter_RefNodeParam(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    ConfigRosParameterImpl real_model = (ConfigRosParameterImpl) model;
    ConfigRosSoftwareComponent comp = (ConfigRosSoftwareComponent) real_model.eContainer();
    Component target_component = (Component) comp.getComponent();
//    List<RosParameter> params = new ArrayList<RosParameter>();
    List<RosParameter> params;

    if(target_component instanceof RosNode) {
    params = ((RosNode) target_component).getRosparameters();
    } else {
     params = new ArrayList<>(); // Default value if target_component is not a RosNode
  }

    List<RosNode> all_include_nodes = new ArrayList<RosNode>();
    if(target_component instanceof System) {
      _utils.getAllNodesFromSystem((System) target_component, all_include_nodes);
       params = all_include_nodes.
           stream().map(RosNode::getRosparameters)
           .flatMap(List::stream).
           collect(Collectors.toList());

      } else {
       params = new ArrayList<>(); // Default value if target_component is not a RosNode
    }


    final List<RosParameter> finial_params = params;
    java.lang.System.out.printf("list RefNodeParam: %s\n", finial_params.toString());


    lookupCrossReference((CrossReference) assignment.getTerminal(),context, acceptor, new Predicate<IEObjectDescription>() {
            @Override
            public boolean apply(IEObjectDescription input) {
              java.lang.System.out.printf("RefNodeParam input: %s\n", input.toString());
              RosParameterImpl inputObj = (RosParameterImpl) input.getEObjectOrProxy();
              if(inputObj.eIsProxy()) {
                    EObject obj = EcoreUtil.resolve(inputObj, model);
                    java.lang.System.out.printf("obj: %s\n", obj.toString());
                    if(finial_params.contains(obj)
                && !comp.getExecutionConfiguration().stream()
                  .map(ConfigRosParameter.class::cast)
                  .map(ConfigRosParameter::getRefNodeParam)
                  .filter(Objects::nonNull)
                  .collect(Collectors.toList())
                  .contains(obj)) {
                        return true;
                    }
                    else {
                      return false;
                    }
            }
              return false;
            }
    });
  }

  @Override
  public void completeConfigRosSoftwareComponent_StartCommand(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
    java.lang.System.out.println("completeConfigRosSoftwareComponent_StartCommand");
    ConfigRosSoftwareComponent real_model = (ConfigRosSoftwareComponent) model;
    System sys = (System) real_model.getComponent();
    if(sys.getFromFile() != null) {
      var ss = sys.getFromFile().split("/", -1);
      var pkg = ss[0];
      var launch_file = ss[2];
      RossystemImplementationAssignment impl_assignment = (RossystemImplementationAssignment) real_model.eContainer();
      if(impl_assignment.getMiddleware() != null ) {
        var ros_version = _deploymentHelper.getRosVersionFromDistro(((RosMiddleware) impl_assignment.getMiddleware()).getValue().getName());
        acceptor.accept(createCompletionProposal(String.format("\"%s launch %s %s\"",ros_version, pkg, launch_file) , context));
      }
    }
  }

}
