/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.deployment.validation;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.inject.Inject;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Extension;

import de.fraunhofer.ipa.deployment.utils.PlanWithRosmodelUtils;
import deployPlanWithRosModel.ConfigRosParameter;
import deployPlanWithRosModel.ConfigRosSoftwareComponent;
import deployPlanWithRosModel.DeployPlanWithRosModelPackage;
import deployPlanWithRosModel.DeployRossystemPlan;
import deployPlanWithRosModel.RossystemImplementationAssignment;
import deploymentPlan.AbstractDeploymentPlan;
import ros.Parameter;
import system.ReferenceSystem;
import system.RosNode;
import system.RosParameter;
import system.System;
import targetEnvironment.impl.ConfigConnectionPropertyImpl;
import targetEnvironment.impl.ConfigDevicePropertyImpl;
/**
 * This class contains custom validation rules.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class PlanWithRosmodelValidator extends AbstractPlanWithRosmodelValidator {

  @Inject
  @Extension
  private PlanWithRosmodelUtils _utils;

  public static final String INVALID_NAME = "invalidName";
  public static final String UNDEFINED_ELE = "undfinedElement";
  public static final String INVALID_REF = "invalidReference";



  @Check
  public void checkLimitInDefinedTargetRossystem(ConfigRosSoftwareComponent comp) {
    DeployRossystemPlan plan = (DeployRossystemPlan) comp.eContainer().eContainer().eContainer();
    if(plan.getTargetRossystem() != null) {
      var refsystems = plan.getTargetRossystem().getComponents().stream()
          .filter(it -> it instanceof ReferenceSystem)
          .map(ReferenceSystem.class::cast)
          .collect(Collectors.toList());
      var systems = refsystems.stream().
          map(ReferenceSystem::getRef).collect(Collectors.toList());
      if(!systems.contains(comp.getComponent())) {
        var msg = String.format("%s doesn't belong to Rossystem: %s",
            comp.getComponent().getName(), plan.getTargetRossystem().getName());
        error(msg,
          DeployPlanWithRosModelPackage.Literals.CONFIG_ROS_SOFTWARE_COMPONENT__COMPONENT,
          INVALID_NAME);
      }
    }
  }

  @Check
  public void checkConfigAllComponentFromTopSystem(DeployRossystemPlan plan) {
    if(plan.getTargetRossystem() != null) {
      var defined_syses = plan.getRealize().getRealizations()
      .stream()
      .map(RossystemImplementationAssignment.class::cast)
      .map(RossystemImplementationAssignment::getSoftwareComponents)
      .flatMap(List::stream)
      .map(ConfigRosSoftwareComponent::getComponent)
      .collect(Collectors.toList());
          List<System>  systems = (List<System>) plan.getTargetRossystem().getComponents().stream()
              .filter(it -> it instanceof ReferenceSystem)
              .map(ReferenceSystem.class::cast)
              .map(ReferenceSystem::getRef)
              .collect(Collectors.toList());
          systems.removeAll(defined_syses);
          if(systems.size() > 0) {
            error(String.format("Please config referenced systems: %s", systems.toString()),
                DeployPlanWithRosModelPackage.Literals.DEPLOY_ROSSYSTEM_PLAN__TARGET_ROSSYSTEM,
                UNDEFINED_ELE);
          }
      }

    }


  @Check
  public void checkIfDefineEmptySystemParamter(ConfigRosSoftwareComponent comp) {
    system.System sys = comp.getComponent();
    List<System> all_include_systems = new ArrayList<System>();
    _utils.getAllSystem(sys, all_include_systems);
    List<Parameter> params = all_include_systems.stream()
        .map(System::getParameter)
        .flatMap(List::stream)
        .filter(p -> p.getValue() == null)
        .collect(Collectors.toList());
       if(params.size() > 0) {
         var refsysparams = comp.getExecutionConfiguration().stream()
         .map(ConfigRosParameter.class::cast)
         .map(ConfigRosParameter::getRefSysParam)
         .filter(Objects::nonNull)
         .collect(Collectors.toList());
         params.removeAll(refsysparams);
         if(params.size() > 0) {
         var msg = String.format("Please define %s under \"executionConfiguration\" as refSysParam",
             params.stream().map(Parameter::getName).collect(Collectors.toList()).toString());
         error(msg,
          DeployPlanWithRosModelPackage.Literals.CONFIG_ROS_SOFTWARE_COMPONENT__COMPONENT,
          UNDEFINED_ELE);
         }
        }
  }

  @Check
  public void checkIfDefineEmptyRosParamter(ConfigRosSoftwareComponent comp) {
    system.System sys = comp.getComponent();
    List<System> all_include_systems = new ArrayList<System>();
    _utils.getAllSystem(sys, all_include_systems);
    List<RosParameter> params =
        all_include_systems.stream()
        .map(System::getComponents)
        .flatMap(List::stream)
        .filter(it -> it instanceof RosNode)
        .map(RosNode.class::cast)
        .map(RosNode::getRosparameters)
        .flatMap(List::stream)
        .filter(p -> p.getValue() == null
            || _utils.checkParameterValueEmpty(p.getValue())
            || _utils.checkParameterStructEmpty(p.getValue()))
        .collect(Collectors.toList());

       if(params.size() > 0) {
         var rosparams = comp.getExecutionConfiguration().stream()
         .map(ConfigRosParameter.class::cast)
         .map(ConfigRosParameter::getRefNodeParam)
         .filter(Objects::nonNull)
         .collect(Collectors.toList());
         params.removeAll(rosparams);
         if(params.size() > 0) {
         var msg = String.format("Please define %s under \"executionConfiguration\" as refNodeParam:",
             params.stream().map(RosParameter::getName).collect(Collectors.toList()).toString());
         error(msg,
          DeployPlanWithRosModelPackage.Literals.CONFIG_ROS_SOFTWARE_COMPONENT__COMPONENT,
          UNDEFINED_ELE);
         }
        }
  }

  @Check
  public void checkIfMapParamToTarEnv(ConfigRosParameter config_param) {
    ConfigRosSoftwareComponent comp = (ConfigRosSoftwareComponent) config_param.eContainer();
    AbstractDeploymentPlan plan = (AbstractDeploymentPlan) comp.eContainer().eContainer().eContainer().eContainer();
    var targetenv = plan.getDeployTo();

    var property = config_param.getTo();
    if(property instanceof ConfigDevicePropertyImpl) {
          if(!targetenv.getIncludeDevice().contains(property.eContainer())) {
            error(String.format("Cannot reference to %s", ((ConfigDevicePropertyImpl) property).toString()),
              DeployPlanWithRosModelPackage.Literals.CONFIG_ROS_PARAMETER__TO,
              INVALID_REF);
            }
      }

    if(property instanceof ConfigConnectionPropertyImpl) {
      if(targetenv.equals(property.eContainer().eContainer().eContainer())) {
            error(String.format("Cannot reference to %s", ((ConfigConnectionPropertyImpl) property).toString()),
              DeployPlanWithRosModelPackage.Literals.CONFIG_ROS_PARAMETER__TO,
              INVALID_REF);
            }
      }

  }
}
