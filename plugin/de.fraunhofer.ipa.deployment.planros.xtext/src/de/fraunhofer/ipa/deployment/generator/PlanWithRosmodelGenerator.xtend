/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.deployment.generator

import deployPlanWithRosModel.RossystemImplementationAssignment
import deploymentPlan.AbstractComputationAssignment
import deploymentPlan.AbstractDeploymentPlan
import java.util.ArrayList
import java.util.Arrays
import java.util.List
import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import de.fraunhofer.ipa.deployment.util.RunTimeType

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PlanWithRosmodelGenerator extends AbstractGenerator {

    @Inject
    extension PlanGenerator planGen

    @Inject
    extension DeploymentHelper

    @Inject
    extension DockerComposeCompilerPlanWithRosmodel

    @Inject
    extension RepoInstallCompilerWithRosmodel

    @Inject
    extension DockerFileCompiler

  var NamingHelperWithRosmodel extendedNamingHelper = new NamingHelperWithRosmodel


  override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
    val plans = resource.allContents.toIterable.filter(AbstractDeploymentPlan)

    generateFiles(plans.toList, fsa)
  }

    def generateFiles(List<AbstractDeploymentPlan> plans, IFileSystemAccess2 fsa){
      for(plan: plans){
        System.out.printf("plan: %s\n", plan.toString)
        extendedNamingHelper.origionNamingHelper.relativePlanFolderPath = plan.name
        extendedNamingHelper.assignmentRossystemRepoInfoMap = plan
        planGen.generateGitlabCI(plan, fsa, extendedNamingHelper.origionNamingHelper)
        planGen.generateWorkflow(plan, fsa, extendedNamingHelper.origionNamingHelper)
        planGen.generateAnsible(plan, fsa, extendedNamingHelper.origionNamingHelper)
        var assignments = plan.realize.realizations
        for (assignment : assignments){
          System.out.printf("assignment: %s\n", assignment.name)
           generateDockerFile(assignment, plan, fsa, extendedNamingHelper)
           generateRosInstall(assignment, plan, fsa, extendedNamingHelper)
        }
        generateDockerComposeFile(assignments, fsa, extendedNamingHelper.origionNamingHelper)
        planGen.generateDocuments(plan, fsa)

      }
    }

 def generateDockerFile(AbstractComputationAssignment assignment, AbstractDeploymentPlan plan, IFileSystemAccess2 fsa, NamingHelperWithRosmodel namingHelper) {
          if(assignment.runtimeType === null || assignment.runtimeType.type == RunTimeType.CONTAINER){
            if(namingHelper.assignmentRossystemRepoInfoMap.get(assignment).filter[it.checkIfReleased == true].size() > 0){
               fsa.generateFile(namingHelper.origionNamingHelper.getRelativeDockerfilePath(assignment.name),
                assignment.dockerFileCompiler(namingHelper.origionNamingHelper, true)
              )
            }
            else{
              fsa.generateFile(namingHelper.origionNamingHelper.getRelativeDockerfilePath(assignment.name),
              assignment.dockerFileCompiler(namingHelper.origionNamingHelper)
              )
            }

          }
      }

  def generateDockerComposeFile(List<AbstractComputationAssignment> assignments, IFileSystemAccess2 fsa, NamingHelper namingHelper) {
    var assPerExecutors = collectAssignmentPerExecutor(assignments)
      assPerExecutors.forEach[compDev, assignmentList|
          fsa.generateFile(
          namingHelper.getCyclonConfigPath(compDev.name),
          cycloneDDSConfig)
      fsa.generateFile(
              namingHelper.getDockerComposePath(compDev.name),
          assignmentList.dockerComposeCompiler(compDev))]
  }

  def generateRosInstall(AbstractComputationAssignment assignment, AbstractDeploymentPlan plan, IFileSystemAccess2 fsa, NamingHelperWithRosmodel namingHelper) {
    if(assignment instanceof RossystemImplementationAssignment){
        if(namingHelper.assignmentRossystemRepoInfoMap.get(assignment).filter[it.checkIfReleased == false].size() > 0){
          fsa.generateFile(
            namingHelper.origionNamingHelper.getReposFile(assignment.name, assignment.executedBy.name),
            assignment.RepoInstallCompiler(namingHelper)
          )
        }
        if(namingHelper.assignmentRossystemRepoInfoMap.get(assignment).filter[it.checkIfReleased == true].size() > 0){
          fsa.generateFile(
            namingHelper.origionNamingHelper.getAptInstallFilePath(assignment.name),
            assignment.AptInstallCompiler(namingHelper)
          )
          runSubprocess(new ArrayList<String>(Arrays.asList("chmod", "777", namingHelper.origionNamingHelper.getAptInstallFilePath(assignment.name))));
        }
              }

    }
}
