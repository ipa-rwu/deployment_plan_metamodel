// automatically generated by Xtext
grammar de.fraunhofer.ipa.deployment.Plan with de.fraunhofer.ipa.deployment.Util

import "http://www.ipa.fraunhofer.de/ImplementationDescription" as implementationDescription
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.ipa.fraunhofer.de/Util" as util
import "http://www.ipa.fraunhofer.de/DeploymentPlan"
import "http://www.ipa.fraunhofer.de/TargetEnvironment" as targetEnvironment


DeploymentPlan returns DeploymentPlan:
    'DeploymentPlan:'
    INDENT
        'name:' name=EString
        'deployTo:' deployTo=[targetEnvironment::TargetDeployEnviroment|EString]
        realize=AbstractRealization
    DEDENT
    ;

AbstarctConfigSoftwareComponent returns AbstarctConfigSoftwareComponent:
    ConfigSoftwareComponent
;

AbstractComputationAssignment returns AbstractComputationAssignment:
    ImplementationAssignment;

AbstractRealization returns AbstractRealization:
    Realization
;


//Middleware returns Middleware:
//    ROSDistro;

AbstractConfigExecutionParameter returns AbstractConfigExecutionParameter:
    ConfigExecutionParameter;

Realization returns Realization:
    {Realization}
    (
    'assignment:'
    INDENT
        realizations+=AbstractComputationAssignment+
    DEDENT
     )?
    ;

ConfigSoftwareComponent returns ConfigSoftwareComponent:
    component=[util::AbstractComputationAssignmentTarget| EString](":"
        (
            INDENT
            'executionConfiguration:'
            INDENT
            (executionConfiguration+=AbstractConfigExecutionParameter)+
            DEDENT
      )?
      ('startCommand:'
          INDENT
              PreListElement startCommand+=EString
          (
              PreListElement (startCommand+=EString)*
          )?
          DEDENT
      )?
        DEDENT
     )?

;

ImplementationAssignment returns ImplementationAssignment:
    PreListElement 'name:' name = EString
    INDENT
        'executedBy:' executedBy=[targetEnvironment::ComputationDeviceInstance|EString]
        'version:' version = EString
        'softwareComponents:'
            INDENT
                PreListElement softwareComponents+=ConfigSoftwareComponent
                (PreListElement softwareComponents+=ConfigSoftwareComponent)*
            DEDENT
                ('middleware:' middleware=Middleware)?
                ('runtimeType:' runtimeType=AbstractRuntime)?
    DEDENT
;

Middleware returns Middleware:
    RosMiddleware
;

RosMiddleware returns RosMiddleware:
    value=ROSDistro
    ;

AbstractRuntime returns AbstractRuntime:
 ContainerRuntime
;

ContainerRuntime returns ContainerRuntime:
    {ContainerRuntime}
    INDENT
    'type:' type=RunTimeType
    ('resource:'
     INDENT
        PreListElement opertingSystemResource+=OperatingSystemResouce
        (PreListElement opertingSystemResource+=OperatingSystemResouce+)?
     DEDENT
     )?
     DEDENT
;


enum ROSDistro returns ROSDistro:
    noetic = 'noetic' | humble = 'humble' | rolling = 'rolling';

ConfigExecutionParameter returns ConfigExecutionParameter:
    {ConfigExecutionParameter}
    PreListElement 'from:' from=[implementationDescription::ExecutionParameter|EString]
    INDENT
        (
        'to:' to=[targetEnvironment::AbstractConfigProperty|EString]
        )?
        (
        'value:' value=PropertyValue
        )?
    DEDENT
;
