/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.deplyoment.generator

import de.fraunhofer.ipa.deployment.util.RunTimeType

import java.util.ArrayList
import java.util.List
import javax.inject.Inject
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import deploymentPlan.AbstractDeploymentPlan
import deploymentPlan.AbstractComputationAssignment

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class PlanWithRosmodelGenerator extends PlanGenerator {

  @Inject
  extension RepoInstallCompiler

  @Inject
  extension DockerFileCompiler

    override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
            val plans = resource.allContents.toIterable.filter(AbstractDeploymentPlan)
            generateFiles(plans.toList, fsa)

    }

    List<RepoInfo> repos = new ArrayList

    override generateRosInstall(AbstractComputationAssignment assignment, AbstractDeploymentPlan plan, IFileSystemAccess2 fsa) {
        repos = assignment.collectRepoFromRossystem
        var unreleasedRepos = repos.filter[it.checkIfReleased==false]
        var releasedRepos = repos.filter[it.checkIfReleased==true]
        if(unreleasedRepos!==null && unreleasedRepos.size > 0){
            fsa.generateFile(String.format("%s/%s/%s_%s.repos", plan.getName(), assignment.name, assignment.name, assignment.executedBy.name),
            unreleasedRepos.toList.RepoInstallCompiler)
        }
        if(releasedRepos!==null && releasedRepos.size > 0){
            fsa.generateFile(String.format("%s/%s/%s_%s.sh", plan.getName(), assignment.name, assignment.name, assignment.executedBy.name),
            releasedRepos.toList.AptInstallScriptCompiler(assignment))
        }
      }

     override generateDockerFile(AbstractComputationAssignment assignment, AbstractDeploymentPlan plan, IFileSystemAccess2 fsa) {
            var Boolean ifRunBash = false
            if(repos.filter[it.checkIfReleased==true].size > 0){
                ifRunBash = true
            }
            if(assignment.runtimeType == RunTimeType.CONTAINER){

                fsa.generateFile(
            String.format("%s/%s/Dockerfile", plan.getName(), assignment.name),
            assignment.dockerFileCompiler(ifRunBash))
            }
        }

}
