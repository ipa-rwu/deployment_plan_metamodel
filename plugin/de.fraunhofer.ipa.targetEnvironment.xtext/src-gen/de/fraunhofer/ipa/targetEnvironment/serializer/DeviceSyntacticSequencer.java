/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.targetEnvironment.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.targetEnvironment.services.DeviceGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class DeviceSyntacticSequencer extends AbstractSyntacticSequencer {

    protected DeviceGrammarAccess grammarAccess;

    @Inject
    protected void init(IGrammarAccess access) {
        grammarAccess = (DeviceGrammarAccess) access;
    }

    @Override
    protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
        if (ruleCall.getRule() == grammarAccess.getDEDENTRule())
            return getDEDENTToken(semanticObject, ruleCall, node);
        else if (ruleCall.getRule() == grammarAccess.getINDENTRule())
            return getINDENTToken(semanticObject, ruleCall, node);
        else if (ruleCall.getRule() == grammarAccess.getPreListElementRule())
            return getPreListElementToken(semanticObject, ruleCall, node);
        return "";
    }

    /**
     * Synthetic terminal rule. The concrete syntax is to be specified by clients.
     * Defaults to the empty string.
     */
    protected String getDEDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }

    /**
     * Synthetic terminal rule. The concrete syntax is to be specified by clients.
     * Defaults to the empty string.
     */
    protected String getINDENTToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }

    /**
     * PreListElement hidden(SL_COMMENT):
     *   '-';
     */
    protected String getPreListElementToken(EObject semanticObject, RuleCall ruleCall, INode node) {
        if (node != null)
            return getTokenText(node);
        return "-";
    }

    @Override
    protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
        if (transition.getAmbiguousSyntaxes().isEmpty()) return;
        List<INode> transitionNodes = collectNodes(fromNode, toNode);
        for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
            List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
            acceptNodes(getLastNavigableState(), syntaxNodes);
        }
    }

}
