/*
 * generated by Xtext 2.30.0
 */
package de.fraunhofer.ipa.targetEnvironment.parser.antlr;

import com.google.inject.Inject;
import de.fraunhofer.ipa.targetEnvironment.parser.antlr.internal.InternalBaseParser;
import de.fraunhofer.ipa.targetEnvironment.services.BaseGrammarAccess;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.parser.antlr.AbstractAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;

public class BaseParser extends AbstractAntlrParser {

    @Inject
    private BaseGrammarAccess grammarAccess;

    @Override
    protected void setInitialHiddenTokens(XtextTokenStream tokenStream) {
        tokenStream.setInitialHiddenTokens("RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT");
    }

    @Override
    protected TokenSource createLexer(CharStream stream) {
        return new BaseTokenSource(super.createLexer(stream));
    }

    /**
     * Indentation aware languages do not support partial parsing since the lexer is inherently stateful.
     * Override and return {@code true} if your terminal splitting is stateless.
     */
    @Override
    protected boolean isReparseSupported() {
        return false;
    }

    @Override
    protected InternalBaseParser createParser(XtextTokenStream stream) {
        return new InternalBaseParser(stream, getGrammarAccess());
    }

    @Override
    protected String getDefaultRuleName() {
        return "Description";
    }

    public BaseGrammarAccess getGrammarAccess() {
        return this.grammarAccess;
    }

    public void setGrammarAccess(BaseGrammarAccess grammarAccess) {
        this.grammarAccess = grammarAccess;
    }
}
